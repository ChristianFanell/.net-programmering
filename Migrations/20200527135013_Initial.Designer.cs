// <auto-generated />
using System;
using LabbUppgift3.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LabbUppgift3.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20200527135013_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("LabbUppgift3.Models.Department", b =>
                {
                    b.Property<string>("DepartmentId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DepartmentName");

                    b.HasKey("DepartmentId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("LabbUppgift3.Models.Employee", b =>
                {
                    b.Property<string>("EmployeeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DepartmentId");

                    b.Property<string>("Name");

                    b.Property<string>("RoleTitle");

                    b.HasKey("EmployeeId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("LabbUppgift3.Models.Errand", b =>
                {
                    b.Property<int>("ErrandID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateOfObservation");

                    b.Property<string>("DepartmentId");

                    b.Property<string>("EmployeeId");

                    b.Property<string>("InformerName")
                        .IsRequired();

                    b.Property<string>("InformerPhone")
                        .IsRequired();

                    b.Property<string>("InvestigatorAction");

                    b.Property<string>("InvestigatorInfo");

                    b.Property<string>("Observation");

                    b.Property<string>("Place")
                        .IsRequired();

                    b.Property<string>("RefNumber");

                    b.Property<string>("StatusId");

                    b.Property<string>("TypeOfCrime")
                        .IsRequired();

                    b.HasKey("ErrandID");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("StatusId");

                    b.ToTable("Errands");
                });

            modelBuilder.Entity("LabbUppgift3.Models.Picture", b =>
                {
                    b.Property<int>("PictureId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ErrandId");

                    b.Property<string>("PictureName");

                    b.HasKey("PictureId");

                    b.HasIndex("ErrandId");

                    b.ToTable("Pictures");
                });

            modelBuilder.Entity("LabbUppgift3.Models.Sample", b =>
                {
                    b.Property<int>("SampleId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ErrandId");

                    b.Property<string>("SampleName");

                    b.HasKey("SampleId");

                    b.HasIndex("ErrandId");

                    b.ToTable("Samples");
                });

            modelBuilder.Entity("LabbUppgift3.Models.Sequence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CurrentValue");

                    b.HasKey("Id");

                    b.ToTable("Sequences");
                });

            modelBuilder.Entity("LabbUppgift3.Models.Status", b =>
                {
                    b.Property<string>("StatusId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("StatusName");

                    b.HasKey("StatusId");

                    b.ToTable("Status1");
                });

            modelBuilder.Entity("LabbUppgift3.Models.Employee", b =>
                {
                    b.HasOne("LabbUppgift3.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");
                });

            modelBuilder.Entity("LabbUppgift3.Models.Errand", b =>
                {
                    b.HasOne("LabbUppgift3.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("LabbUppgift3.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("LabbUppgift3.Models.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");
                });

            modelBuilder.Entity("LabbUppgift3.Models.Picture", b =>
                {
                    b.HasOne("LabbUppgift3.Models.Errand", "Errand")
                        .WithMany("Pictures")
                        .HasForeignKey("ErrandId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LabbUppgift3.Models.Sample", b =>
                {
                    b.HasOne("LabbUppgift3.Models.Errand", "Errand")
                        .WithMany("Samples")
                        .HasForeignKey("ErrandId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
